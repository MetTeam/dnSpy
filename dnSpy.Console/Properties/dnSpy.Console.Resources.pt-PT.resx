<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata" id="root">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace"/>
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0"/>
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string"/>
              <xsd:attribute name="type" type="xsd:string"/>
              <xsd:attribute name="mimetype" type="xsd:string"/>
              <xsd:attribute ref="xml:space"/>
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string"/>
              <xsd:attribute name="name" type="xsd:string"/>
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1"/>
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2"/>
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1"/>
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3"/>
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4"/>
              <xsd:attribute ref="xml:space"/>
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1"/>
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required"/>
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <data name="Error1" xml:space="preserve">
    <value>ERRO: {0}</value>
  </data>
  <data name="Examples" xml:space="preserve">
    <value>Exemplos:
  {0} -o c:\out\path C:\some\path
      Decompila todos ficheiros .NET no diretório acima e salva os em C:\out\path
  {0} -o c:\out\path -r C:\some\path
      Decompila todos ficheiros .NET no diretório acima e todos os sub diretórios {0} -o C:\out\path C:\some\path\*.dll
      Decompila todos ficheiros *.dll .NET no diretório acima e salva os em C:\out\path
  {0} --md 0x06000123 file.dll
      Decompila o membro com o token 0x06000123
  {0} -t system.int32 --gac-file "mscorlib, Version=4.0.0.0"
      Decompila System.Int32 de mscorlib</value>
  </data>
  <data name="FileOrDirDoesNotExist" xml:space="preserve">
    <value>Ficheiro/diretório '{0}' não existe</value>
  </data>
  <data name="InvalidOption" xml:space="preserve">
    <value>Opção inválida: {0}</value>
  </data>
  <data name="InvalidSolutionName" xml:space="preserve">
    <value>.sln nome ({0}) deve ser relativo ao diretório de projeto</value>
  </data>
  <data name="InvalidToken" xml:space="preserve">
    <value>Token de metadados inválidos</value>
  </data>
  <data name="InvalidVSVersion" xml:space="preserve">
    <value>Versão inválida do Visual Studio: {0}</value>
  </data>
  <data name="LanguageDoesNotExist" xml:space="preserve">
    <value>Língua '{0}' não existe</value>
  </data>
  <data name="Languages" xml:space="preserve">
    <value>Idiomas:</value>
  </data>
  <data name="LanguageXDoesNotExist" xml:space="preserve">
    <value>Língua {0} não existe</value>
  </data>
  <data name="MissingAsmSearchPath" xml:space="preserve">
    <value>Caminho de pesquisa de assembly em falta</value>
  </data>
  <data name="MissingDotNetFilename" xml:space="preserve">
    <value>Nome do ficheiro .NET em falta</value>
  </data>
  <data name="MissingLanguageName" xml:space="preserve">
    <value>Nome de linguagem em falta</value>
  </data>
  <data name="MissingMDToken" xml:space="preserve">
    <value>Token de metadados em falta</value>
  </data>
  <data name="MissingNumberOfThreads" xml:space="preserve">
    <value>Número de threads em falta</value>
  </data>
  <data name="MissingOptions" xml:space="preserve">
    <value>Nenhuma opção especificada</value>
  </data>
  <data name="MissingOutputDir" xml:space="preserve">
    <value>Diretório de output em falta</value>
  </data>
  <data name="MissingSolutionName" xml:space="preserve">
    <value>Nome .sln em falta</value>
  </data>
  <data name="MissingVSVersion" xml:space="preserve">
    <value>Versão Visual Studio em falta</value>
  </data>
  <data name="NoLanguagesFound" xml:space="preserve">
    <value>Nenhuma língua foi encontrada. Certifique-se que existem os ficheiros dll de linguagem na mesma pasta como este programa.</value>
  </data>
  <data name="NotDotNetFile" xml:space="preserve">
    <value>{0} não é um ficheiro .NET</value>
  </data>
  <data name="OnlyOneFileCanBeDecompiled" xml:space="preserve">
    <value>Apenas um ficheiro pode ser compilado ao usar --md</value>
  </data>
  <data name="Usage" xml:space="preserve">
    <value>{0} [options] [fileOrDir1] [fileOrDir2] [...]

  --asm-path caminho    caminho de procura de assembly. Caminhos podem ser separados com '{1}' ou você pode usar múltiplos  --asm-path's
  --user-gac caminho    caminho GAC do utilizador. Caminhos podem ser separados com '{1}' ou você pode usar múltiplos --user-gac's
  --no-gac     não usar o GAC para procurar assemblies. Útil com --no-stdlib
  --no-stdlib  projetos não fazem referencia a mscorlib
  --no-sln     não criar ficheiro .sln
  --sln-name nome   nome do ficheiro .sln
  --threads N  número de threads de trabalho. Padrão é um thread por core
  --no-resources   não descompactar  recursos
  --no-resx    não criar ficheiro .resx
  --no-baml    não descompilar baml para xaml
  --vs N       Visual Studio versão, 2005, 2008, ..., 2015
  --project-guid N    guid do projeto
  -t nome      descompilar o tipo com o nome especificadopara stdout. Seja Namespace.Name ou Name, case insensitive
  --type nome  mesmo que -t
  --md N       descompila o número com token de metadata N para stdout
  --gac-file N descompila um assembly de GAC. Utilize nome completo do assembly para descompilar uma versão exata.
  -r           procura recursiva por ficheiro .NET para descompilar
  -o outdir    diretório de output
  -l lang      define linguagem, padrão é C#. Guids podem ser usados.</value>
  </data>
  <data name="MissingUserGacPath" xml:space="preserve">
    <value>Caminho GAC do utilizador em falta</value>
  </data>
  <data name="InvalidMemberToDecompile" xml:space="preserve">
    <value>Somente tipos, métodos, campos, eventos e propriedades podem ser descompiladas</value>
  </data>
  <data name="CouldNotFindTypeX" xml:space="preserve">
    <value>Tipo {0} não pôde ser encontrado</value>
  </data>
  <data name="CouldNotResolveGacFileX" xml:space="preserve">
    <value>Não foi possível resolver o assembly GAC '{0}'</value>
  </data>
  <data name="MissingGacFile" xml:space="preserve">
    <value>Nome de assembly GAC em falta</value>
  </data>
  <data name="MissingTypeName" xml:space="preserve">
    <value>Nome completo do tipo em falta</value>
  </data>
  <data name="LanguageXDoesNotSupportProjects" xml:space="preserve">
    <value>Língua {0} não oferece suporte a criação de ficheiros do projeto</value>
  </data>
  <data name="LanguageOptions" xml:space="preserve">
    <value>Opções de idioma:</value>
  </data>
  <data name="LanguageOptionsDesc" xml:space="preserve">
    <value>Todas as opções booleanas podem ser desactivadas por meio de 'no-' ou ' dont-', por exemplo. --dont-sort-members</value>
  </data>
  <data name="MissingOptionArgument" xml:space="preserve">
    <value>Argumento de opção em falta</value>
  </data>
  <data name="InvalidGuid" xml:space="preserve">
    <value>GUID Inválido</value>
  </data>
</root>
